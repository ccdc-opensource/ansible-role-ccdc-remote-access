---
- name: Install EPEL
  become: true
  ansible.builtin.package:
    name: epel-release
    state: present

- name: Install GNOME desktop group
  become: true
  ansible.builtin.dnf:
    name: "@Server with GUI"
    state: present

- name: Set default to graphical.target
  become: true
  ansible.builtin.file:
    path: /etc/systemd/system/default.target
    state: link
    src: /usr/lib/systemd/system/graphical.target

- name: Install xrdp, xorg backend and X11 helpers
  become: true
  ansible.builtin.package:
    name:
      - xrdp
      - xorgxrdp
      - xorg-x11-xauth
      - xorg-x11-xinit
    state: present

- name: Write /etc/xrdp/startwm.sh
  become: true
  ansible.builtin.copy:
    dest: /etc/xrdp/startwm.sh
    mode: '0755'
    content: |
      #!/bin/sh
      [ -r /etc/profile ] && . /etc/profile
      if [ -r /etc/X11/xinit/Xsession ]; then exec /etc/X11/xinit/Xsession; fi
      if [ -r /etc/X11/Xsession ]; then exec /etc/X11/Xsession; fi
      if command -v gnome-session >/dev/null 2>&1; then
        export GNOME_SHELL_SESSION_MODE=classic
        export XDG_SESSION_DESKTOP=GNOME
        export XDG_CURRENT_DESKTOP=GNOME
        exec gnome-session
      fi
      exec /usr/bin/xterm

- name: Remove earlier managed Xorg session block
  become: true
  ansible.builtin.blockinfile:
    path: /etc/xrdp/xrdp.ini
    marker: "; {mark} MANAGED XORG SESSION"
    state: absent

- name: Install Xorg server
  become: true
  ansible.builtin.package:
    name: xorg-x11-server-Xorg
    state: present
  register: xorg_srv

- name: Check if Xorg is already present
  become: true
  ansible.builtin.command: grep -q '^\[Xorg\]' /etc/xrdp/xrdp.ini
  register: has_xorg
  changed_when: false
  failed_when: has_xorg.rc not in [0, 1]

- name: Ensure Xorg session exists
  become: true
  ansible.builtin.blockinfile:
    path: /etc/xrdp/xrdp.ini
    marker: "; {mark} MANAGED XORG SESSION"
    insertafter: EOF
    block: |
      [Xorg]
      name=Xorg
      lib=libxorgxrdp.so
      username=ask
      password=ask
      ip=127.0.0.1
      port=-1
      code=20
  register: xrdp_ini_xorg
  when: has_xorg.rc == 1

- name: Check if Xorg is already present in sesman.ini
  become: true
  ansible.builtin.command: grep -q '^\[Xorg\]' /etc/xrdp/sesman.ini
  register: has_sesman_xorg
  changed_when: false
  failed_when: has_sesman_xorg.rc not in [0, 1]

- name: Ensure Xorg block in sesman.ini
  become: true
  ansible.builtin.blockinfile:
    path: /etc/xrdp/sesman.ini
    marker: "; {mark} MANAGED XORG SESMAN"
    insertafter: EOF
    block: |
      [Xorg]
      param=/usr/libexec/Xorg
      param=-noreset
      param=-nolisten
      param=tcp
      param=-logfile
      param=.xorgxrdp.%s.log
  register: sesman_xorg_block
  when: has_sesman_xorg.rc == 1

- name: Ensure sesman uses /usr/libexec/Xorg
  become: true
  ansible.builtin.lineinfile:
    path: /etc/xrdp/sesman.ini
    regexp: '^param=Xorg$|^param=.*/Xorg$'
    line: 'param=/usr/libexec/Xorg'
    insertafter: '^\[Xorg\]'
    backup: true
  register: sesman_xorg_path
  failed_when: false

- name: Ensure xrdp lib dirs exist
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /usr/lib64/xrdp
    - /usr/lib/xrdp

- name: Stat possible libxorgxrdp.so locations
  become: true
  ansible.builtin.stat:
    path: "{{ item }}"
  register: xorglib_stats
  loop:
    - /usr/lib64/xrdp/libxorgxrdp.so
    - /usr/lib/xrdp/libxorgxrdp.so
    - /usr/lib64/xorg/modules/libxorgxrdp.so
    - /usr/lib/xorg/modules/libxorgxrdp.so

- name: Copy libxorgxrdp.so -> /usr/lib64/xrdp
  become: true
  ansible.builtin.copy:
    remote_src: true
    src: /usr/lib64/xorg/modules/libxorgxrdp.so
    dest: /usr/lib64/xrdp/libxorgxrdp.so
    mode: '0644'
  register: copy_xorg_64
  when:
    - xorglib_stats.results[0].stat.exists == false
    - xorglib_stats.results[2].stat.exists == true

- name: Copy libxorgxrdp.so -> /usr/lib/xrdp
  become: true
  ansible.builtin.copy:
    remote_src: true
    src: /usr/lib/xorg/modules/libxorgxrdp.so
    dest: /usr/lib/xrdp/libxorgxrdp.so
    mode: '0644'
  register: copy_xorg_32
  when:
    - xorglib_stats.results[1].stat.exists == false
    - xorglib_stats.results[3].stat.exists == true

- name: Restore SELinux context on xrdp libs
  become: true
  ansible.builtin.command: "{{ item }}"
  changed_when: false
  failed_when: false
  loop:
    - restorecon -v /usr/lib64/xrdp/libxorgxrdp.so
    - restorecon -v /usr/lib/xrdp/libxorgxrdp.so

- name: Disable Xvnc session in xrdp.ini
  become: true
  ansible.builtin.replace:
    path: /etc/xrdp/xrdp.ini
    regexp: '(?ms)^\[Xvnc\]\n.*?(?=^\[|$\Z)'
    replace: '; [Xvnc] disabled by Ansible\n'
    backup: true
  register: xrdp_disable_xvnc

- name: Enable and start xrdp
  become: true
  ansible.builtin.service:
    name: xrdp
    state: started
    enabled: true

- name: Restart xrdp if Xorg config changed
  become: true
  ansible.builtin.service:
    name: xrdp
    state: restarted
  when: >
    xorg_srv.changed or
    xrdp_ini_xorg.changed or
    sesman_xorg_path.changed or
    sesman_xorg_block.changed | default(false) or
    copy_xorg_64.changed | default(false) or
    copy_xorg_32.changed | default(false) or
    xrdp_disable_xvnc.changed | default(false)

- name: Install firewalld
  become: true
  ansible.builtin.package:
    name: firewalld
    state: present

- name: Enable and start firewalld
  become: true
  ansible.builtin.service:
    name: firewalld
    state: started
    enabled: true

- name: Check if firewalld is active
  become: true
  ansible.builtin.command: systemctl is-active firewalld
  register: firewalld_state
  changed_when: false
  failed_when: false

- name: Open RDP in firewalld
  become: true
  ansible.posix.firewalld:
    service: rdp
    permanent: true
    state: enabled
    immediate: "{{ firewalld_state.stdout == 'active' }}"

- name: Install SELinux utils and xrdp policy
  become: true
  ansible.builtin.package:
    name:
      - policycoreutils-python-utils
      - xrdp-selinux
    state: present

- name: List SELinux booleans
  become: true
  ansible.builtin.command: semanage boolean -l
  register: sebools
  changed_when: false
  failed_when: sebools.rc != 0
  when: ansible_selinux.status == "enabled"

- name: Allow xrdp to connect to unreserved ports
  become: true
  ansible.posix.seboolean:
    name: xrdp_connect_all_unreserved_ports
    state: true
    persistent: true
  when:
    - ansible_selinux.status == "enabled"
    - sebools.stdout is defined
    - "'xrdp_connect_all_unreserved_ports' in sebools.stdout"

- name: Wait for xrdp to listen on 3389
  ansible.builtin.wait_for:
    port: 3389
    timeout: 30
    state: started
